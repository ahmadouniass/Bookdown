[["index.html", "Prise en main du package Bookdown 1 Package Bookdown", " Prise en main du package Bookdown 1 Package Bookdown Ministère de l’Economie, du Plan et de la Coopération Agence nationale de la Statistique et de la Démographie (ANSD) Ecole nationale de la Statistique et de l’Analyse économique Pierre Ndiaye (ENSAE) Projet statistique avec R Prise en main de Bookdown Rédigé par : Ahmadou Niass et Samba Sow Respectivement Élèves en ISE 1 cycle long et ISE1 Eco Sous la supervision de : M. Aboubacar HEMA Research Analyst Année scolaire : 2024/2025 "],["introduction.html", "2 Introduction 2.1 Qu’est-ce que Bookdown ? 2.2 Outils nécessaires 2.3 Pourquoi apprendre Bookdown ? 2.4 Ce que tu vas apprendre dans ce livre", " 2 Introduction Bienvenue dans ce guide de prise en main de Bookdown, un outil puissant pour créer des livres interactifs, des rapports scientifiques, des tutoriels ou des cours en ligne à partir de fichiers R Markdown. 2.1 Qu’est-ce que Bookdown ? Bookdown est un package R développé par Yihui Xie qui permet de : Structurer plusieurs fichiers .Rmd en chapitres et sous-chapitres, Générer des livres interactifs au format HTML, PDF ou EPUB, Inclure facilement des formules mathématiques, du code R exécutable, des figures, des tables, et même des références croisées, Publier en ligne (sur bookdown.org, GitHub Pages, Netlify, etc.). 2.2 Outils nécessaires Avant de commencer, assure-toi d’avoir installé : Outil Rôle R Langage principal RStudio Environnement de développement intégré Pandoc Conversion des fichiers Markdown en HTML/PDF (inclus dans RStudio) Git (optionnel) Pour publier sur GitHub ou collaborer 2.3 Pourquoi apprendre Bookdown ? Bookdown est utile si tu veux : Rédiger un mémoire ou rapport de projet dynamique, Documenter un cours de statistiques ou un projet de recherche, Créer des supports pédagogiques interactifs en ligne, Générer des rapports reproductibles, avec du code exécuté automatiquement. 2.4 Ce que tu vas apprendre dans ce livre À travers ce guide, tu apprendras à : Organiser les fichiers de ton projet Bookdown, Maîtriser le YAML (title, output, etc.), Compiler ton livre dans différents formats, Insertion d’images de vidéos de fichiers audio et plus, Le personnaliser (styles CSS, titres, etc.), Le publier en ligne. "],["installation-et-configuration.html", "3 Installation et Configuration 3.1 Prérequis : R, RStudio, LaTeX, Pandoc 3.2 Installation de Bookdown 3.3 Créer un projet Bookdown avec RStudio 3.4 Créer un squelette de livre avec R (alternative sans interface) 3.5 Contenu des fichiers principaux 3.6 A retenir", " 3 Installation et Configuration 3.1 Prérequis : R, RStudio, LaTeX, Pandoc Avant de commencer à créer un livre avec Bookdown, il est essentiel d’avoir un environnement de travail bien configuré. Cette section présente les outils requis ainsi que leur rôle. 3.1.1 R Bookdown est un package du langage R. Il faut donc que R soit installé sur votre ordinateur.  Téléchargement : https://cran.r-project.org Version recommandée : 4.0 ou supérieure Vérifiez votre version avec : version 3.1.2 RStudio RStudio est l’environnement de développement recommandé. Il facilite la création, l’organisation et la compilation de projets Bookdown. Il intègre Pandoc, le moteur de conversion utilisé par Bookdown Il fournit une interface graphique simple pour créer un projet et le compiler 3.1.3 LaTeX (pour la génération PDF) Pour produire un livre en PDF, il faut une distribution LaTeX. La méthode la plus simple consiste à utiliser le package tinytex, qui fournit une version légère et portable de LaTeX. # Installation du package tinytex install.packages(&quot;tinytex&quot;) # Installation de TinyTeX (LaTeX minimal) tinytex::install_tinytex() # Vérification de l’installation tinytex::is_tinytex()  L’installation de TinyTeX peut prendre quelques minutes mais ne doit être faite qu’une seule fois. 3.1.4 Package remotes (optionnel) Le package remotes permet d’installer Bookdown depuis GitHub (utile pour accéder à la version de développement avec les dernières fonctionnalités). install.packages(&quot;remotes&quot;) 3.1.5 Récapitulatif Outil Rôle Obligatoire ? R Langage principal utilisé par Bookdown ✅ Oui RStudio Environnement de développement intégré ✅ Oui Pandoc Conversion vers HTML/PDF/EPUB/Word ✅ Oui (inclus) LaTeX Génération de documents PDF ✅ Oui tinytex Distribution LaTeX recommandée ✅ Oui remotes Installation avancée depuis GitHub ❌ Optionnel Une fois ces outils en place, vous pouvez passer à l’installation du package bookdown. 3.2 Installation de Bookdown Une fois R, RStudio, Pandoc et LaTeX installés, vous pouvez procéder à l’installation du package bookdown. 3.2.1 Installation stable depuis le CRAN La version stable du package bookdown est disponible sur le CRAN (le dépôt officiel de R). install.packages(&quot;bookdown&quot;) Cela garantit une version stable, testée et compatible avec les autres packages du CRAN. 3.2.2 Vérification de l’installation Après l’installation, chargez le package pour vérifier qu’il fonctionne correctement : library(bookdown) Pour afficher la version installée : packageVersion(&quot;bookdown&quot;) 3.2.3 Installation de la version de développement (optionnel) Si vous souhaitez accéder aux toutes dernières fonctionnalités ou corriger un bug résolu récemment, vous pouvez installer la version de développement directement depuis GitHub : r # Assurez-vous d&#39;avoir installé &#39;remotes&#39; (voir Partie 1) remotes::install_github(&quot;rstudio/bookdown&quot;) Attention : cette version peut contenir des changements encore en test. À réserver à des utilisateurs expérimentés ou à ceux qui veulent contribuer au développement. 3.2.4 Exemple de vérification automatisée Voici un script simple qui installe bookdown seulement s’il n’est pas encore installé : if (!requireNamespace(&quot;bookdown&quot;, quietly = TRUE)) { message(&quot;Le package &#39;bookdown&#39; n&#39;est pas installé. Installation en cours...&quot;) install.packages(&quot;bookdown&quot;) } else { message(&quot;Le package &#39;bookdown&#39; est déjà installé. Version actuelle : &quot;, packageVersion(&quot;bookdown&quot;)) } Avec bookdown installé et fonctionnel, vous êtes prêt à créer votre premier projet. Passons maintenant à la création d’un projet Bookdown dans RStudio. #Création d’un Livre avec Bookdown Une fois bookdown installé, vous êtes prêt à créer votre premier projet de livre. Bookdown fournit un modèle de projet prêt à l’emploi, que vous pouvez personnaliser facilement. 3.3 Créer un projet Bookdown avec RStudio La méthode la plus simple consiste à utiliser l’interface de RStudio : Allez dans File &gt; New Project &gt; New Directory Sélectionnez Book Project using bookdown Donnez un nom à votre projet (ex. MonLivre) Cochez l’option pour initialiser un dépôt Git (optionnel mais recommandé) Cliquez sur Create Project Cette opération crée automatiquement une structure de base 3.4 Créer un squelette de livre avec R (alternative sans interface) Tu peux aussi générer manuellement un squelette de livre avec cette commande : bookdown::bookdown_skeleton(getwd()) Cela crée les fichiers essentiels dans ton répertoire de travail courant. Ci-dessous, une vidéo locale illustrant ces étapes dans RStudio : Votre navigateur ne supporte pas la lecture de vidéos HTML5. 3.5 Contenu des fichiers principaux 3.5.1 fichier index.Rmd Le fichier index.Rmd est le point de départ de ton livre Bookdown. Il joue un rôle central : Il contient le bloc YAML d’en-tête, où sont définis le titre, l’auteur, la date, les fichiers de bibliographie, le format de sortie (gitbook, pdf_book, etc.). Il est toujours compilé en premier, même s’il n’est pas listé dans _bookdown.yml. Dans les versions HTML, il fait office de page d’accueil du site. Voici un exemple d’en-tête minimal : --- title: &quot;Titre du Livre&quot; author: &quot;Ton Nom&quot; date: &quot;2025-04-19&quot; site: bookdown::bookdown_site output: bookdown::gitbook bibliography: [book.bib] --- Ce fichier peut aussi contenir une introduction au livre, une préface ou des objectifs pédagogiques. Il ne doit contenir qu’un seul titre de niveau #, sinon Bookdown le découpe en plusieurs chapitres. 3.5.2 fichier _bookdown.yml Ce fichier de configuration contrôle la structure logique du livre et le comportement général de la compilation. Il est écrit au format YAML, et accompagne index.Rmd dans le dossier racine du projet. Voici un exemple typique : book_filename: &quot;MonLivre&quot; rmd_files: [ &quot;index.Rmd&quot;, &quot;01-introduction.Rmd&quot;, &quot;02-methodes.Rmd&quot;, &quot;03-resultats.Rmd&quot; ] new_session: true ###Que signifient ces options ? book_filename : définit le nom de base des fichiers de sortie (par exemple MonLivre.html, MonLivre.pdf, MonLivre.epub). &gt; Si cette ligne est omise, le nom du dossier du projet est utilisé par défaut. rmd_files : liste, dans l’ordre souhaité, les fichiers .Rmd à compiler. &gt; Cela te permet de forcer un ordre personnalisé, même si les noms de fichiers ne sont pas numérotés. new_session : si true, chaque chapitre est exécuté dans une session R indépendante. &gt; Cela améliore la reproductibilité, car aucun objet n’est “hérité” d’un chapitre précédent. &gt; Si tu veux partager des objets entre chapitres, tu peux mettre false, mais ce n’est pas recommandé. 3.5.2.1 Bonnes pratiques Garde une structure claire et numérotée dans rmd_files (01-, 02-…) pour t’y retrouver facilement. Active toujours new_session: true pour éviter les effets de bord liés à la mémoire R. Ne liste que les fichiers que tu veux vraiment voir apparaître dans le livre final. Ce fichier est léger mais fondamental : il permet à Bookdown de savoir quoi compiler, dans quel ordre, et avec quelle logique d’exécution. 3.5.3 fichier _output.yml Le fichier _output.yml permet de définir les formats de sortie de ton livre (HTML, PDF, ePub, Word, etc.) et de personnaliser leur rendu. Il complète les informations de l’en-tête YAML de index.Rmd, en centralisant toutes les options de mise en forme et de style. 3.5.3.1 Exemple typique : bookdown::gitbook: css: style.css config: toc: collapse: section download: [&quot;pdf&quot;, &quot;epub&quot;] bookdown::pdf_book: latex_engine: xelatex toc: yes toc_depth: 2 3.5.3.2 Détails des options 3.5.3.2.1 bookdown::gitbook Ce bloc configure la version HTML du livre, idéale pour le web. css: style.css : permet d’appliquer une feuille de style personnalisée pour modifier l’apparence du site (couleurs, polices, marges, etc.) config: : toc: : personnalise la table des matières (ici, les sections peuvent être repliées) download: : affiche des boutons de téléchargement en haut du site, pour les autres formats disponibles (PDF, EPUB, etc.) Le format gitbook est parfait pour une lecture interactive avec navigation par chapitre à gauche et il offre plus de flexbilité. C’est d’ailleurs sur ce dernier que nous nous concentrerons le plus tout au long de ce traval 3.5.3.2.2 bookdown::pdf_book Ce bloc configure la version PDF du livre, générée via LaTeX. latex_engine: xelatex : moteur LaTeX recommandé (gère mieux les polices modernes et les caractères spéciaux) toc: yes : indique si une table des matières doit être incluse dans le PDF toc_depth: 2 : spécifie le niveau de profondeur de la table des matières (par exemple : chapitre + sections) Tu peux aussi ajouter d’autres options, comme keep_tex: true (pour conserver le fichier .tex), ou includes: pour inclure un fichier preamble.tex. ####️ Ce que tu peux personnaliser Le style HTML : en ajoutant un fichier style.css dans ton projet (modifie l’aspect du texte, des titres, des liens…) Le rendu PDF : via LaTeX (xelatex conseillé pour la langue française) Les formats proposés au téléchargement : tu peux proposer .pdf, .epub, .docx, etc. En résumé, _output.yml te permet de piloter précisément l’apparence de chaque version de ton livre, sans toucher au contenu. C’est la couche “design” de Bookdown. 3.6 A retenir À ce stade, tu disposes de tous les éléments de base pour démarrer ton livre avec Bookdown. Voici les points essentiels à retenir : 3.6.1 index.Rmd : le cœur du projet Ce fichier est indispensable : il contient les métadonnées globales du livre (titre, auteur, bibliographie, format de sortie…). Il sert aussi de chapitre d’introduction ou de page d’accueil, notamment dans les formats HTML. Il est toujours traité en premier, même s’il n’est pas listé dans _bookdown.yml. 3.6.2 Les chapitres sont des .Rmd numérotés Chaque chapitre du livre est un fichier .Rmd distinct. Il est fortement recommandé d’utiliser une numérotation (01-, 02-, etc.) pour faciliter la lecture et l’organisation. Les fichiers sont listés dans l’ordre voulu dans _bookdown.yml, ce qui détermine la structure logique du livre. 3.6.3 Configuration centralisée dans les fichiers .yml _bookdown.yml définit : L’ordre des chapitres (rmd_files) Le nom du fichier de sortie (book_filename) Le comportement d’exécution (new_session) _output.yml précise : Les formats de sortie du livre (gitbook, pdf_book, etc.) Le style et les options visuelles (CSS, moteur LaTeX, table des matières, boutons de téléchargement…) "],["écriture-du-contenu-avec-bookdown.html", "4 Écriture du contenu avec Bookdown 4.1 Syntaxe Markdown (rappel rapide) 4.2 Figures et tableaux 4.3 Citations bibliographiques", " 4 Écriture du contenu avec Bookdown Une fois la structure du projet en place, tu peux commencer à écrire les chapitres de ton livre. Bookdown repose sur R Markdown, un langage simple et puissant pour mélanger du texte, des équations, du code et des résultats dans un seul document. 4.1 Syntaxe Markdown (rappel rapide) Tu peux structurer ton texte avec une syntaxe légère : # : Titre de chapitre (niveau 1) ##, ### : Sous-sections (niveaux 2 et 3) *italique* ou _italique_ **gras** ou __gras__ &gt; citation - ou * pour des listes à puces 1. pour des listes numérotées `code` pour du code en ligne Pour chaque chapitre, utilise un seul titre de niveau # au début du fichier .Rmd pour qu’il soit reconnu comme un chapitre à part entière. 4.1.1 Blocs de code R (chunks) Tu peux insérer du code exécutable en R dans des blocs appelés chunks : summary(mtcars) ## mpg cyl disp hp drat wt ## Min. :10.40 Min. :4.000 Min. : 71.1 Min. : 52.0 Min. :2.760 Min. :1.513 ## 1st Qu.:15.43 1st Qu.:4.000 1st Qu.:120.8 1st Qu.: 96.5 1st Qu.:3.080 1st Qu.:2.581 ## Median :19.20 Median :6.000 Median :196.3 Median :123.0 Median :3.695 Median :3.325 ## Mean :20.09 Mean :6.188 Mean :230.7 Mean :146.7 Mean :3.597 Mean :3.217 ## 3rd Qu.:22.80 3rd Qu.:8.000 3rd Qu.:326.0 3rd Qu.:180.0 3rd Qu.:3.920 3rd Qu.:3.610 ## Max. :33.90 Max. :8.000 Max. :472.0 Max. :335.0 Max. :4.930 Max. :5.424 ## qsec vs am gear carb ## Min. :14.50 Min. :0.0000 Min. :0.0000 Min. :3.000 Min. :1.000 ## 1st Qu.:16.89 1st Qu.:0.0000 1st Qu.:0.0000 1st Qu.:3.000 1st Qu.:2.000 ## Median :17.71 Median :0.0000 Median :0.0000 Median :4.000 Median :2.000 ## Mean :17.85 Mean :0.4375 Mean :0.4062 Mean :3.688 Mean :2.812 ## 3rd Qu.:18.90 3rd Qu.:1.0000 3rd Qu.:1.0000 3rd Qu.:4.000 3rd Qu.:4.000 ## Max. :22.90 Max. :1.0000 Max. :1.0000 Max. :5.000 Max. :8.000 Les résultats (textes, graphiques, tableaux) sont automatiquement intégrés dans le livre. Tu peux ajouter des options comme echo=FALSE, fig.width, message=FALSE, etc. Pour aller plus loin tu peux te réferrer au travail de nos camarades sur le thème : Rmarkdown 4.2 Figures et tableaux 4.2.1 Figures Tu peux générer des graphiques avec ggplot2, plot(), etc., et leur associer une légende : plot(cars) Figure 4.1: Exemple de graphique Bookdown numérote automatiquement les figures et permet de les référencer dans le texte avec \\@ref(fig:plot-example). 4.2.2 Tableaux Tu peux créer des tableaux élégants avec : knitr::kable() (basique) gt::gt() (avancé) kableExtra (pour plus de mise en forme) knitr::kable(head(iris), caption = &quot;Extrait des données iris&quot;) Table 4.1: Extrait des données iris Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa Comme les figures, tu peux les référencer dans le texte : \\@ref(tab:tab-example). 4.2.3 Mathématiques et équations Bookdown permet d’écrire des formules mathématiques en LaTeX : Inline : \\( E = mc^2 \\) Bloc centré : $$ E = mc^2 $$ Tu peux aussi numéroter une équation pour y faire référence : $$ E = mc^2 (\\#eq:energie) $$ Comme vu en \\@ref(eq:energie), cette équation exprime... 4.2.4  Références croisées Bookdown permet de lier dynamiquement les parties du document (chapitres, figures, tableaux, équations…). Pour créer une référence : ajoute un identifiant à la fin d’un titre ou d’un chunk : # Méthodologie {#method} Et pour y faire référence : Voir la section \\@ref(method) 4.3 Citations bibliographiques Bookdown prend en charge les références bibliographiques grâce à Pandoc et au format BibTeX. Cela te permet de citer des articles, des livres ou des sources web de manière dynamique, avec une mise en forme automatique. 4.3.1 1. Créer un fichier .bib Commence par créer un fichier texte portant l’extension .bib (qui est souvent généré automatiquement sous le nom debook.bib) qui contient tes références bibliographiques au format BibTeX. Voici un exemple de contenu typique dans book.bib : @book{xie2016bookdown, title = {bookdown: Authoring Books and Technical Documents with R Markdown}, author = {Yihui Xie}, year = {2016}, publisher = {Chapman and Hall/CRC}, url = {https://bookdown.org/yihui/bookdown/} } Tu peux générer ce fichier à partir de Zotero, Google Scholar, ou d’autres outils de gestion bibliographique. 4.3.2 Déclarer la bibliographie dans index.Rmd Dans le bloc YAML en tête de index.Rmd, indique le nom du fichier .bib et le style bibliographique : bibliography: [book.bib] biblio-style: apalike link-citations: true biblio-style: apalike : style auteur-année classique Tu peux aussi utiliser d’autres styles (chicago, ieee, etc.) ou un fichier .csl (Citation Style Language) link-citations: true ajoute un lien hypertexte entre la citation dans le texte et la référence complète 4.3.3 Citer une source dans le texte Dans ton texte .Rmd, tu peux : Citer entre parenthèses : [@xie2016bookdown] → (Xie 2016) Intégrer la citation dans la phrase : @xie2016bookdown → Xie (2016) Exemples : Selon @xie2016bookdown, Bookdown est très utile pour l’écriture scientifique. Des extensions ont été proposées dans des travaux récents [@xie2016bookdown; @wickham2019advanced]. 4.3.4 Génération automatique de la bibliographie Lors de la compilation : Bookdown recherche toutes les citations dans les fichiers .Rmd Il génère automatiquement la section “Références” à la fin du livre (ou à l’endroit où tu places un fichier .Rmd avec un titre # Références) Tu n’as pas besoin d’écrire la bibliographie à la main : elle sera construite dynamiquement à partir du fichier .bib. Donne à chaque référence une clé unique et explicite (@xie2016bookdown plutôt que @ref1) Place le fichier .bib à la racine de ton projet Utilise des groupes de références avec [@ref1; @ref2] si nécessaire Teste la compilation en HTML et en PDF pour vérifier que les styles s’affichent bien "],["insertion-de-contenus-multimédias-images-vidéos-sons.html", "5 Insertion de contenus multimédias (images, vidéos, sons) 5.1 Insertion d’images 5.2 Insertion de vidéos 5.3 Insertion de fichiers audio 5.4 Intégration d’un Shiny", " 5 Insertion de contenus multimédias (images, vidéos, sons) Bookdown te permet d’enrichir ton livre avec des contenus multimédias : images, vidéos, sons, qu’ils soient en local (dans ton dossier) ou hébergés en ligne. Cela améliore l’accessibilité et l’interactivité de ton document, surtout en HTML. 5.1 Insertion d’images L’image est le contenu multimédia le plus utilisé dans un document Bookdown, qu’il s’agisse de logos, de cartes, de schémas ou de captures d’écran. Bookdown accepte les images locales (placées dans le dossier du projet) ou hébergées en ligne. 5.1.1 Image locale (dans le dossier du projet) Pour insérer une image locale, voici la procédure recommandée : Crée un dossier images/ dans ton projet Bookdown Place l’image à l’intérieur (ex. logo.png) Utilise la syntaxe Markdown classique pour l’insérer dans ton .Rmd : ![Logo du projet](images/logo.png) Cette méthode fonctionne aussi bien en HTML qu’en PDF ou EPUB, à condition que l’image soit disponible au moment de la compilation. 5.1.1.1 Options supplémentaires avec HTML Markdown ne permet pas de contrôler finement la taille ou la position. Pour cela, tu peux utiliser du HTML à la place : &lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;images/logo.png&quot; width=&quot;300px&quot; /&gt; &lt;/p&gt; Cela permet de : - Centrer l’image (align=\"center\") - Contrôler sa largeur (width=\"300px\", ou width=\"50%\") - Conserver la compatibilité avec tous les formats HTML Si tu veux forcer une image à occuper toute la largeur de la page en HTML : &lt;img src=&quot;images/schema.png&quot; style=&quot;width:100%;&quot;/&gt; 5.1.1.2 Astuces bonnes pratiques Utilise des formats d’image légers : .png, .jpg, .svg (PDF-friendly) Préfère les chemins relatifs (images/monimage.png) plutôt que des chemins absolus Pour les graphiques produits dans R, utilise plutôt un chunk R avec fig.cap 5.1.2 Image hébergée en ligne Tu peux aussi insérer une image stockée en ligne avec la même syntaxe Markdown : ![Logo ENSAE](https://example.com/images/logo_ensae.png) Cela fonctionne uniquement si la page peut accéder à Internet. Pour les PDF, l’image sera téléchargée à la compilation. Cette méthode est utile si tu ne veux pas alourdir ton dépôt GitHub ou ton dossier de projet avec des fichiers image. 5.1.2.1 Résumé Type d’image Syntaxe recommandée Compatible HTML Compatible PDF Image locale ![Légende](images/img.png) ✅ ✅ Image en ligne ![Légende](https://...) ✅ ✅* Image stylée &lt;img src=... width=...&gt; (HTML) ✅ ⚠️ (ignore le style) Si l’image en ligne n’est pas disponible lors de la compilation, elle ne s’affichera pas dans le PDF. 5.2 Insertion de vidéos 5.2.0.1 Vidéo locale (.mp4 ou .webm) Crée un dossier videos/ et ajoute ce code dans ton .Rmd : &lt;video width=&quot;720&quot; height=&quot;405&quot; controls&gt; &lt;source src=&quot;videos/creation_bookdown.webm&quot; type=&quot;video/webm&quot;&gt; Votre navigateur ne supporte pas la lecture de vidéos HTML5. &lt;/video&gt; Utilise .webm ou .mp4 pour un bon support navigateur. Pour une vidéo responsive : &lt;div style=&quot;max-width: 100%;&quot;&gt; &lt;video controls style=&quot;width: 100%;&quot;&gt; &lt;source src=&quot;videos/demo.mp4&quot; type=&quot;video/mp4&quot;&gt; &lt;/video&gt; &lt;/div&gt; 5.2.0.2 Vidéo hébergée (YouTube, PeerTube…) Pour insérer une vidéo YouTube : &lt;iframe width=&quot;720&quot; height=&quot;405&quot; src=&quot;https://www.youtube.com/embed/3rOXFJ0F1iE&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt; 5.3 Insertion de fichiers audio Tu peux intégrer des sons ou commentaires vocaux dans tes chapitres. 5.3.0.1 Exemple (audio local .mp3) : &lt;audio controls&gt; &lt;source src=&quot;audio/intro.mp3&quot; type=&quot;audio/mpeg&quot;&gt; Votre navigateur ne supporte pas l&#39;audio HTML5. &lt;/audio&gt; Place tes fichiers audio dans un dossier audio/ dans ton projet. 5.3.1 Limitations selon le format de sortie Contenu HTML PDF EPUB Images ✅ ✅ ✅ Vidéos (.mp4) ✅ ❌ ⚠️ (souvent ignoré) YouTube ✅ ❌ ❌ Audio (.mp3) ✅ ❌ ⚠️ (selon lecteur) Pour le PDF, les médias interactifs ne sont pas intégrés : il vaut mieux fournir un lien externe ou une capture. 5.3.2 Astuces pratiques Organise tes fichiers multimédias dans des sous-dossiers : images/, videos/, audio/ Vérifie que les chemins sont relatifs à la racine du projet Préfère les formats .webm et .mp4 pour les vidéos, .mp3 pour les sons Pour les versions PDF : remplace les vidéos par des liens cliquables ou des captures d’écran 5.4 Intégration d’un Shiny Tu as deux options : Un lien cliquable (fonctionne dans tous les formats : HTML, PDF, EPUB) Une iframe intégrée (uniquement pour la version HTML) 5.4.1 ✅ 1. Méthode universelle (tous formats) – lien cliquable ## Passons à l&#39;exploration Pour explorer l&#39;application interactive de comparaison dynamique, cliquez ici :  [Accéder à l&#39;application Shiny](https://ahmedniass.shinyapps.io/Comparaison/) L&#39;application vous permet de visualiser, filtrer et comparer les résultats de manière interactive. ➡️ Recommandée si tu veux générer aussi une version PDF ou EPUB. 5.4.2 Méthode HTML uniquement – intégration en iframe ## Passons à l&#39;exploration Vous pouvez également consulter l&#39;application directement ci-dessous (format HTML uniquement) : &lt;iframe src=&quot;https://ahmedniass.shinyapps.io/Comparaison/&quot; width=&quot;100%&quot; height=&quot;600&quot; frameborder=&quot;0&quot; style=&quot;border:1px solid #ccc; border-radius: 8px;&quot;&gt; &lt;/iframe&gt; Cela intègre l’application directement dans la page de ton livre HTML (comme une vidéo YouTube). ⚠️ Cela ne fonctionnera pas si tu compiles en PDF ou EPUB. Pour éviter l’erreur Pandoc, entoure ce bloc d’un commentaire conditionnel : &lt;!-- only in HTML --&gt; &lt;iframe ...&gt;&lt;/iframe&gt; 5.4.3 Astuce supplémentaire : bouton stylisé (HTML) Si tu veux un bouton dans la version HTML : &lt;p style=&quot;text-align:center;&quot;&gt; &lt;a href=&quot;https://ahmedniass.shinyapps.io/Comparaison/&quot; target=&quot;_blank&quot; style=&quot;background-color:#0077cc; color:white; padding:10px 20px; text-decoration:none; border-radius:6px;&quot;&gt;  Lancer l&#39;application Shiny &lt;/a&gt; &lt;/p&gt; "],["créer-un-modèle-bookdown-réutilisable.html", "6 Créer un modèle Bookdown réutilisable 6.1 Créer un dossier modèle à réutiliser (version simple) 6.2 Transformer ton modèle en package R (avancé) 6.3 Créer un modèle RStudio (R Markdown template) 6.4 Créer un modèle RStudio réutilisable (R Markdown Template) 6.5 Compilation du livre 6.6 Où vont les fichiers compilés ? 6.7 Astuces utiles", " 6 Créer un modèle Bookdown réutilisable Lorsque tu construis un projet Bookdown bien structuré (avec un style, une organisation de chapitres, des fichiers YAML bien définis, etc.), il est naturel de vouloir réutiliser cette base pour d’autres livres, rapports ou travaux collaboratifs — sans repartir de zéro à chaque fois. Heureusement, Bookdown et l’écosystème R offrent plusieurs moyens de créer un modèle réutilisable, aussi appelé template. Que tu sois un utilisateur individuel souhaitant gagner du temps, ou un enseignant ou responsable de projet souhaitant fournir un cadre à d’autres, tu peux facilement : Copier un dossier modèle déjà configuré Créer ton propre package R avec un squelette de livre Ou même proposer ton modèle directement dans l’interface de RStudio Dans cette section, nous explorons trois approches complémentaires, de la plus simple à la plus professionnelle, pour créer un template Bookdown que tu pourras cloner, distribuer ou améliorer au fil du temps. 6.1 Créer un dossier modèle à réutiliser (version simple) 6.1.1 Objectif Créer une base de projet Bookdown personnalisée que tu pourras réutiliser à chaque fois que tu veux écrire un nouveau livre ou rapport, sans repartir de zéro. 6.1.2 Etapes détaillées 6.1.2.1 Crée un dossier modèle Dans ton ordinateur, crée un dossier que tu appelles par exemple : bookdown_template/ Dans ce dossier, place tous les fichiers de base nécessaires à un projet Bookdown propre et prêt à être modifié : index.Rmd : le fichier d’introduction avec un bon YAML 01-intro.Rmd, 02-contenu.Rmd : des chapitres vides ou partiellement remplis _bookdown.yml : où tu définis l’ordre des chapitres et le nom du livre _output.yml : où tu précises les formats de sortie (HTML, PDF…) style.css : une feuille de style pour personnaliser le HTML preamble.tex : optionnel, pour personnaliser le rendu PDF book.bib : un fichier .bib vide ou avec des références de base Tu as ainsi un projet “modèle” tout prêt à cloner. 6.1.2.2 Réutiliser ce modèle pour un nouveau projet Quand tu veux écrire un nouveau livre : 6.1.2.2.1 Avec une simple commande dans un terminal : cp -r bookdown_template/ mon_nouveau_livre/ Cela crée un nouveau dossier appelé mon_nouveau_livre/ qui contient une copie du modèle. 6.1.2.2.2 Ou depuis RStudio : Clique sur File &gt; New Project Sélectionne Existing Directory Navigue vers le dossier mon_nouveau_livre/ que tu viens de copier Tu peux maintenant éditer les fichiers, changer les titres, les chapitres, etc. 6.2 Transformer ton modèle en package R (avancé) Tu peux créer un package R (pour plus de détail sur le procédé vous pouvez vous référer à l’exposé des camarades sur : la création de package sur R) qui contient un squelette Bookdown. C’est ce que fait le package usethis pour les projets. Voici un exemple d’approche avec le package bookdownplus qui propose plusieurs modèles. Tu pourrais créer le tien ainsi : usethis::create_package(&quot;bookdownTemplate&quot;) Et y inclure une fonction comme : create_my_book &lt;- function(path) { dir.create(path) file.copy(system.file(&quot;template/index.Rmd&quot;, package = &quot;bookdownTemplate&quot;), file.path(path, &quot;index.Rmd&quot;)) # copier les autres fichiers... } Tu peux ensuite distribuer ce package (localement ou via GitHub), et l’appeler comme : bookdownTemplate::create_my_book(&quot;nouveau_projet&quot;) 6.3 Créer un modèle RStudio (R Markdown template) Si tu veux qu’un utilisateur de RStudio voie ton modèle dans File &gt; New File &gt; R Markdown &gt; From Template, tu peux créer un package avec un template Rmd enregistré. Exemple : Crée un dossier inst/rmarkdown/templates/monbook/ Dans ce dossier, ajoute : skeleton.Rmd (le modèle du livre) template.yaml (description) Le fichier template.yaml pourrait ressembler à : name: Mon modèle Bookdown description: Un modèle Bookdown personnalisé pour les rapports ENSAE create_dir: true Ensuite, en important ton package, le modèle apparaîtra dans les menus de RStudio 6.4 Créer un modèle RStudio réutilisable (R Markdown Template) 6.4.1 Objectif Tu veux que quelqu’un puisse aller dans RStudio → File &gt; New File &gt; R Markdown &gt; From Template et y trouver ton propre modèle de livre Bookdown dans la liste. Quand il cliquera dessus, RStudio va automatiquement créer un nouveau projet avec tous les fichiers de ton modèle (index.Rmd, _bookdown.yml, etc.). C’est exactement ce que font certains packages comme bookdownplus ou rticles. 6.4.2 Étapes pour créer ton propre modèle Tu dois créer un package R qui contient ton modèle, puis le déclarer comme un template R Markdown. 6.4.2.1 Étape 1 – Créer un package R (vide) Dans RStudio, fais : usethis::create_package(&quot;MonModeleBookdown&quot;) Cela crée un dossier avec les fichiers de base du package R (DESCRIPTION, NAMESPACE, etc.). 6.4.2.2 Étape 2 – Créer le dossier du modèle R Markdown Dans ton package, crée le chemin suivant : MonModeleBookdown/ └── inst/ └── rmarkdown/ └── templates/ └── monbook/ ├── skeleton.Rmd └── template.yaml skeleton.Rmd : c’est le fichier de départ, comme un index.Rmd, avec tout ton modèle (YAML + contenu). template.yaml : c’est le descriptif du modèle (nom, description…). 6.4.2.3 Contenu du fichier template.yaml Voici un exemple très simple : name: Mon modèle Bookdown description: Un modèle Bookdown personnalisé pour les rapports ENSAE create_dir: true name : le nom qui s’affichera dans RStudio description : une petite phrase pour décrire ton modèle create_dir: true : dit à RStudio de créer un dossier pour le projet (indispensable) 6.4.2.4 Contenu de skeleton.Rmd Tu peux copier ton vrai index.Rmd dedans, ou même faire un squelette de type : --- title: &quot;Titre par défaut&quot; author: &quot;Nom de l’auteur&quot; date: &quot;2025-04-19&quot; site: bookdown::bookdown_site output: bookdown::gitbook --- Et continuer avec un chapitre exemple, un chunk, etc. 6.4.2.5 Etape 3 – Installer ton package Quand ton package est prêt, installe-le avec : devtools::install(&quot;MonModeleBookdown&quot;) Ou pour l’installer depuis GitHub si tu le mets en ligne : devtools::install_github(&quot;tonpseudo/MonModeleBookdown&quot;) 6.4.3 Résultat Maintenant, dans RStudio : Va dans File &gt; New File &gt; R Markdown Clique sur l’onglet From Template Tu verras ton modèle Mon modèle Bookdown dans la liste En cliquant dessus, RStudio génère un projet avec tous tes fichiers prêts à l’emploi #️ Génération du rendu final Une fois ton contenu rédigé et structuré, l’étape suivante consiste à compiler ton livre Bookdown, c’est-à-dire à générer le document final dans un ou plusieurs formats : HTML, PDF ou EPUB. Bookdown te permet de produire ces formats à partir des mêmes fichiers .Rmd. 6.5 Compilation du livre La compilation transforme les fichiers .Rmd en un livre complet, avec : Table des matières Numérotation automatique des figures, tableaux, équations Références croisées, citations bibliographiques Fichiers finaux dans un dossier de sortie (par défaut : _book/) 6.5.1 Méthode 1 : via la console R Tu peux lancer la compilation avec la commande suivante : bookdown::render_book(&quot;index.Rmd&quot;) Cela compile tous les fichiers .Rmd listés dans _bookdown.yml Le résultat est placé dans le dossier _book/ 6.5.2 Méthode 2 : via l’interface RStudio Tu peux aussi utiliser l’interface graphique : Ouvre ton projet Bookdown Va dans l’onglet Build (ou Ctrl + Shift + B) Clique sur Build Book 6.5.3 Compiler dans un format spécifique Bookdown peut générer plusieurs formats. Tu peux cibler un seul format à la fois : bookdown::render_book(&quot;index.Rmd&quot;, output_format = &quot;bookdown::gitbook&quot;) bookdown::render_book(&quot;index.Rmd&quot;, output_format = &quot;bookdown::pdf_book&quot;) bookdown::render_book(&quot;index.Rmd&quot;, output_format = &quot;bookdown::epub_book&quot;) Assure-toi d’avoir configuré ces formats dans _output.yml. 6.5.4 Compiler dans tous les formats Pour tout générer en une seule commande : bookdown::render_book(&quot;index.Rmd&quot;, output_format = &quot;all&quot;) 6.6 Où vont les fichiers compilés ? Par défaut, tous les fichiers générés sont placés dans un dossier appelé : _book/ Tu peux changer ce nom dans _bookdown.yml : output_dir: &quot;docs&quot; Ce changement est utile si tu veux publier sur GitHub Pages, qui lit le dossier docs/. 6.7 Astuces utiles Si tu modifies un seul chapitre, utilise bookdown::preview_chapter(\"02-chapitre.Rmd\") pour tester rapidement sans tout recompiler Si tu travailles avec LaTeX, installe TinyTeX : install.packages(&quot;tinytex&quot;) tinytex::install_tinytex() Tu peux forcer le nettoyage du dossier de sortie avec : bookdown::clean_book() A présent, tu sais comment produire un livre complet depuis tes fichiers .Rmd. Prochaine étape : le déploiement en ligne ou l’export pour diffusion ! "],["déploiement-dun-livre-bookdown.html", "7 Déploiement d’un livre Bookdown 7.1 Publication avec GitHub Pages (idéal pour HTML) 7.2 Publication avec Netlify (flexible et automatisé) 7.3 Publication sur bookdown.org 7.4 Partage manuel (local ou cloud)", " 7 Déploiement d’un livre Bookdown Une fois ton livre généré (HTML, PDF ou EPUB), tu peux le diffuser facilement à ton public. Bookdown permet plusieurs méthodes de déploiement, que tu choisiras selon tes besoins : Publication sur le web (lecture en ligne) Partage de fichiers en local (clé USB, mail…) Diffusion académique (GitHub Pages, Netlify, Bookdown.org…) Dans ce chapitre, nous passons en revue les alternatives principales, avec les étapes détaillées pour chacune. 7.1 Publication avec GitHub Pages (idéal pour HTML) GitHub Pages permet d’héberger gratuitement ton livre HTML. Tu n’as besoin que d’un compte GitHub et d’un projet Bookdown. 7.1.1 Etapes à suivre Dans le fichier _bookdown.yml, change le dossier de sortie : output_dir: &quot;docs&quot; Compile ton livre en HTML : bookdown::render_book(&quot;index.Rmd&quot;, output_format = &quot;bookdown::gitbook&quot;) Initialise un dépôt Git dans ton projet (si ce n’est pas déjà fait) : git init git add . git commit -m &quot;Initial commit&quot; Crée un nouveau dépôt sur GitHub (ex : monlivre), puis connecte-le : git remote add origin https://github.com/tonpseudo/monlivre.git git push -u origin main Sur GitHub, va dans Settings &gt; Pages → Choisis la branche main et le dossier /docs/  Ton livre sera visible à l’adresse : https://tonpseudo.github.io/monlivre/ 7.1.2 Vidéo tutorielle 7.2 Publication avec Netlify (flexible et automatisé) Netlify est une plateforme de déploiement moderne qui se connecte à GitHub et compile automatiquement ton livre à chaque modification. 7.2.1 Etapes à suivre Crée un compte sur https://netlify.com Lien ton compte GitHub Clique sur “New site from Git” Sélectionne ton dépôt contenant le livre Configure les options : Build command : Rscript -e &quot;bookdown::render_book(&#39;index.Rmd&#39;)&quot; Publish directory : _book/ Clique sur Deploy site Ton livre sera mis en ligne avec une URL du type https://monlivre.netlify.app. 7.3 Publication sur bookdown.org Le site bookdown.org est une plateforme gratuite proposée par RStudio/Posit qui permet d’héberger des livres réalisés avec Bookdown. Il est idéal pour les auteurs souhaitant partager publiquement leur livre sans avoir à configurer Netlify ou GitHub Pages. 7.3.1 Avantages de bookdown.org Hébergement gratuit et maintenu par RStudio Pas besoin de configurer un serveur ou un dépôt Git Intégration directe depuis RStudio via le package rsconnect URL publique personnalisée (du type bookdown.org/tonpseudo/nomdulivre) 7.3.2 Étapes pour publier sur bookdown.org 7.3.2.1 Créer un compte Va sur : https://bookdown.org/connect Clique sur Sign Up avec un compte GitHub ou Google Tu auras accès à un espace personnel pour héberger ton livre. 7.3.2.2 Installer les packages nécessaires Assure-toi que les packages suivants sont installés : install.packages(&quot;bookdown&quot;) install.packages(&quot;rsconnect&quot;) 7.3.2.3 Configurer rsconnect Dans RStudio, tu peux lier ton compte bookdown.org avec cette commande (tu n’as besoin de le faire qu’une seule fois) : rsconnect::setAccountInfo( name = &quot;tonpseudo&quot;, token = &quot;XXXXXX&quot;, secret = &quot;YYYYYY&quot; ) Tu obtiendras ces informations (name, token, secret) en suivant les instructions dans ton tableau de bord bookdown.org (dans l’onglet Tokens / Deploy). 7.3.2.4 Publier le livre Compile ton livre une première fois localement : bookdown::render_book(&quot;index.Rmd&quot;) Puis publie-le avec : bookdown::publish_book(name = &quot;nomdulivre&quot;) Le nom utilisé dans name = \"...\" deviendra l’URL de ton livre. Par exemple : https://bookdown.org/tonpseudo/nomdulivre/ 7.3.2.5 Mettre à jour le livre Quand tu fais des modifications et recompiles ton livre, tu peux le republier simplement avec : bookdown::publish_book() Bookdown se souvient du nom et de la connexion à bookdown.org. 7.3.2.6 Bonnes pratiques Choisis un nom de livre unique et explicite Compile d’abord localement pour vérifier que tout fonctionne Utilise un _output.yml soigné (menus, formats, style) Partage ton lien bookdown.org/tonpseudo/nomdulivre à tes lecteurs ou collègues bookdown.org est une excellente solution clé en main pour publier rapidement un livre R Markdown sans configuration technique. 7.4 Partage manuel (local ou cloud) Si tu ne veux pas publier ton livre sur Internet, tu peux le partager localement : 7.4.1 Format HTML Compile ton livre : bookdown::render_book(\"index.Rmd\") Copie tout le dossier _book/ : Sur une clé USB Dans un dossier Google Drive ou OneDrive Dans un serveur local de ton organisation Le fichier index.html permet d’ouvrir le livre dans n’importe quel navigateur 7.4.2 Format PDF Compile ton livre avec bookdown::pdf_book Le fichier .pdf peut être envoyé par email, Plateforme pédagogique, etc. Tu as maintenant toutes les clés pour partager ton livre avec ton public, en ligne ou hors ligne, dans le format le plus adapté à ton objectif. "],["pour-aller-plus-loin.html", "8 Pour aller plus loin 8.1 Ajouter des bulles d’information au survol (infobulles) 8.2 Astuce alternative avec le package tippy (plus stylé) 8.3 Appliquer des styles personnalisés aux titres 8.4 Références croisées internes 8.5  Générer plusieurs formats à la fois 8.6 Créer ton propre modèle Bookdown 8.7 Bonus : Réorganiser les fichiers générés 8.8 Ajouter un pied de page (footer) dans Bookdown", " 8 Pour aller plus loin Ce chapitre rassemble des astuces utiles et avancées pour enrichir ton livre Bookdown, améliorer l’expérience utilisateur et maîtriser des fonctionnalités plus poussées. Ces éléments sont optionnels, mais très utiles pour professionnaliser ton rendu. 8.1 Ajouter des bulles d’information au survol (infobulles) Pour afficher un texte explicatif au survol d’un mot ou d’un concept, tu peux utiliser la balise HTML native suivante : &lt;span title=&quot;Texte affiché au survol&quot;&gt;Mot ou expression&lt;/span&gt; Exemple : Le YAML permet de configurer le format du document. Cela fonctionne dans les formats HTML (gitbook, bs4), mais pas dans PDF.De plus lorsque le bookdown est hébergé sur bookdown.org ca n’apparait pas malheureusement. 8.2 Astuce alternative avec le package tippy (plus stylé) Le package tippy permet de créer des infobulles plus jolies, mais nécessite un peu de configuration JS/CSS. Exemple : tippy::tippy(&quot;NDVI&quot;, tooltip = &quot;Normalized Difference Vegetation Index&quot;) Tu peux aussi l’utiliser dans des tableaux interactifs ou des légendes. Fonctionne uniquement dans le rendu HTML, et nécessite que tippy.js soit bien chargé. 8.3 Appliquer des styles personnalisés aux titres Tu peux modifier l’apparence des titres ## pour les rendre visuellement plus lisibles (ex : ligne verticale, couleur, fond…). Par exemple, dans ton style.css : .book .book-body h2 { border-left: 4px solid #a0d6b4; padding-left: 10px; color: #0077cc; font-weight: 600; } 8.4 Références croisées internes Bookdown permet de créer des liens internes dynamiques : # Introduction {#intro} Voir la [section d’introduction](#intro) pour plus d’explications. Ou encore des figures et tableaux référencés automatiquement : ```r plot(cars) Figure 8.1: Un exemple de graphique Voir la figure 8.1 ## Utiliser des expressions dynamiques R dans le texte Tu peux inclure des valeurs R **directement dans le texte** avec les backticks R : ```markdown Le jeu de données contient 32 lignes. Ce qui donne : ➡️ Le jeu de données contient 32 lignes. 8.5  Générer plusieurs formats à la fois Tu peux compiler ton livre en HTML, PDF et EPUB avec : bookdown::render_book(&quot;index.Rmd&quot;, output_format = &quot;all&quot;) Et personnaliser les options de chaque format dans _output.yml. 8.6 Créer ton propre modèle Bookdown Tu peux créer un template réutilisable en : Créant un dossier modèle (bookdown_template/) avec tous les fichiers de base Le copiant à chaque nouveau projet Ou même en créant un package R avec un squelette prêt à déployer 8.7 Bonus : Réorganiser les fichiers générés Tu peux modifier le dossier de sortie des fichiers HTML en changeant dans _bookdown.yml : output_dir: &quot;docs&quot; Cela est utile pour publier via GitHub Pages, Netlify, etc. 8.8 Ajouter un pied de page (footer) dans Bookdown Tu peux personnaliser ton livre Bookdown en ajoutant un pied de page visible sur toutes les pages HTML. Ce footer peut contenir : des infos sur l’auteur, un lien vers GitHub, un copyright, une licence, ou même un logo. 8.8.1 Étape 1 – Créer un fichier footer.html Crée un fichier à la racine de ton projet (ou dans un dossier includes/) que tu appelles footer.html. Voici un exemple de contenu : &lt;div style=&quot;text-align: center; font-size: 0.9em; padding-top: 20px; color: #888;&quot;&gt; © 2025 — Réalisé avec &lt;strong&gt;Bookdown&lt;/strong&gt; par Ahmadou Niass &amp; Samba Sow &lt;br/&gt; &lt;a href=&quot;https://github.com/tonpseudo/ton-repo-bookdown&quot; target=&quot;_blank&quot;&gt;Voir sur GitHub&lt;/a&gt; | Tous droits réservés. &lt;/div&gt; Tu peux y ajouter du style, des liens, des images, ou même des logos. 8.8.2 Étape 2 – Ajouter le footer dans _output.yml Dans ton fichier _output.yml, ajoute la référence à footer.html via l’option includes: after_body : bookdown::gitbook: css: style.css includes: after_body: footer.html config: toc: collapse: section download: [&quot;pdf&quot;] sharing: no after_body signifie que le contenu du footer.html sera ajouté en bas de chaque page HTML du livre. 8.8.3 Étape 3 – Recompiler le livre Dans RStudio ou via la console : bookdown::render_book(&quot;index.Rmd&quot;) Ouvre ensuite _book/index.html dans ton navigateur : tu devrais voir le pied de page affiché sur toutes les pages. 8.8.4 Astuces supplémentaires Tu peux aussi créer un footer.html différent selon la version du livre, en utilisant des blocs conditionnels HTML si besoin. Pour styliser le footer de manière plus poussée, ajoute des règles CSS dans ton fichier style.css : .book .book-body .page-wrapper .page-inner &gt; div:last-child { margin-top: 50px; padding-top: 10px; border-top: 1px solid #eee; font-size: 0.9em; color: #777; } "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]

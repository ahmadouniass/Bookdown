ndvi_out <- render_indicator_raster("ndvi", palette = "YlGn")
library(raster)
library(tmap)
library(leaflet)
library(sf)
library(exactextractr)
# Fonction rÃ©utilisable
render_indicator_raster <- function(indicator_name, palette = "viridis") {
path <- paste0("data/", indicator_name, "/", indicator_name, "_senegal.tif")
rast <- raster(path)
# Carte statique
static_map <- tm_shape(rast) +
tm_raster(style = "quantile", palette = palette, title = toupper(indicator_name)) +
tm_layout(main.title = paste0(toupper(indicator_name), " â€“ SÃ©nÃ©gal (2024)"),
legend.outside = TRUE)
# Carte interactive
pal_fun <- colorNumeric(palette = palette, domain = values(rast), na.color = "transparent")
interactive_map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addRasterImage(rast, colors = pal_fun, opacity = 0.8) %>%
addLegend(pal = pal_fun, values = values(rast), title = indicator_name, position = "bottomright")
list(static = static_map, interactive = interactive_map, raster = rast)
}
# Chargement du shapefile rÃ©gional
regions <- st_read("data/shapes/regions_senegal.shp", quiet = TRUE)
ndvi_out <- render_indicator_raster("ndvi", palette = "YlGn")
ndvi_out$static
ndvi_out$interactive
regions$ndvi <- exact_extract(ndvi_out$raster, regions, 'mean')
tm_shape(regions) +
tm_polygons("ndvi", palette = "YlGn", style = "quantile", title = "NDVI moyen") +
tm_layout(main.title = "NDVI moyen par rÃ©gion â€“ 2024", legend.outside = TRUE)
ari_out <- render_indicator_raster("ari", palette = "Greens")
ari_out$static
ari_out$interactive
ndwi_out <- render_indicator_raster("ndwi", palette = "Blues")
lswi_out <- render_indicator_raster("lswi", palette = "Blues")
library(raster)
library(tmap)
library(leaflet)
library(sf)
library(exactextractr)
# Fonction rÃ©utilisable
render_indicator_raster <- function(indicator_name, palette = "viridis") {
path <- paste0("data/", indicator_name, "/", indicator_name, "_senegal.tif")
rast <- raster(path)
# Carte statique
static_map <- tm_shape(rast) +
tm_raster(style = "quantile", palette = palette, title = toupper(indicator_name)) +
tm_layout(main.title = paste0(toupper(indicator_name), " â€“ SÃ©nÃ©gal (2024)"),
legend.outside = TRUE)
# Carte interactive
pal_fun <- colorNumeric(palette = palette, domain = values(rast), na.color = "transparent")
interactive_map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addRasterImage(rast, colors = pal_fun, opacity = 0.8) %>%
addLegend(pal = pal_fun, values = values(rast), title = indicator_name, position = "bottomright")
list(static = static_map, interactive = interactive_map, raster = rast)
}
# Chargement du shapefile rÃ©gional
regions <- st_read("data/shapes/regions_senegal.shp", quiet = TRUE)
ndvi_out <- render_indicator_raster("ndvi", palette = "YlGn")
ndvi_out$static
ndvi_out$interactive
regions$ndvi <- exact_extract(ndvi_out$raster, regions, 'mean')
tm_shape(regions) +
tm_polygons("ndvi", palette = "YlGn", style = "quantile", title = "NDVI moyen") +
tm_layout(main.title = "NDVI moyen par rÃ©gion â€“ 2024", legend.outside = TRUE)
ari_out <- render_indicator_raster("ari", palette = "Greens")
ari_out$static
ari_out$interactive
lswi_out <- render_indicator_raster("lswi", palette = "Blues")
lswi_out$static
lswi_out$interactive
ndbi_out <- render_indicator_raster("ndbi", palette = "Oranges")
ibi_out <- render_indicator_raster("ibi", palette = "Oranges")
ibi_out$static
ibi_out$interactive
## Fonctions de traitement raster et cartographie
library(raster)
library(tmap)
library(leaflet)
library(sf)
library(exactextractr)
# Fonction de chargement et visualisation de raster
render_indicator_raster <- function(indicator_name, palette = "viridis") {
path <- paste0("data/", indicator_name, "/", indicator_name, "_2024.tif")
rast <- raster(path)
static_map <- tm_shape(rast) +
tm_raster(style = "quantile", palette = palette, title = toupper(indicator_name)) +
tm_layout(main.title = paste0(toupper(indicator_name), " â€“ SÃ©nÃ©gal (2024)"),
legend.outside = TRUE)
pal_fun <- colorNumeric(palette = palette, domain = values(rast), na.color = "transparent")
interactive_map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addRasterImage(rast, colors = pal_fun, opacity = 0.8) %>%
addLegend(pal = pal_fun, values = values(rast), title = indicator_name, position = "bottomright")
list(static = static_map, interactive = interactive_map, raster = rast)
}
# ðŸ”¹ Fonction dâ€™extraction zonale
extract_raster_by_region <- function(raster_obj, shapefile_path, region_id = "region") {
regions <- st_read(shapefile_path, quiet = TRUE)
mean_vals <- exact_extract(raster_obj, regions, 'mean')
regions$mean_value <- round(mean_vals, 3)
regions
}
# ðŸ”¹ Carte interactive enrichie
plot_raster_aggregated_leaflet <- function(raster_obj, shapefile_path, palette = "YlGn", region_id = "region", title = "Indice") {
regions <- extract_raster_by_region(raster_obj, shapefile_path, region_id)
pal <- colorNumeric(palette = palette, domain = regions$mean_value, na.color = "transparent")
leaflet(regions) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
fillColor = ~pal(mean_value),
weight = 1,
color = "#666",
fillOpacity = 0.7,
label = ~paste0(!!as.name(region_id), ": ", mean_value),
labelOptions = labelOptions(direction = "auto"),
popup = ~paste("<b>RÃ©gion :</b>", !!as.name(region_id), "<br><b>Valeur moyenne :</b>", mean_value)
) %>%
addLegend(pal = pal, values = ~mean_value, title = paste("Valeur moyenne â€“", title), position = "bottomright")
}
plot_raster_aggregated_leaflet(
raster_obj = ndvi_out$raster,
shapefile_path = "data/shapes/regions_senegal.shp",
palette = "YlGn",
region_id = "nom_region",  # selon le champ de ton shapefile
title = "NDVI 2024"
)
View(regions)
plot_raster_aggregated_leaflet(
raster_obj = ndvi_out$raster,
shapefile_path = "data/shapes/regions_senegal.shp",
palette = "YlGn",
region_id = "ADM1_FR",  # selon le champ de ton shapefile
title = "NDVI 2024"
)
plot_raster_aggregated_leaflet(
raster_obj = ndvi_out$raster,
shapefile_path = "data/shapes/regions_senegal.shp",
palette = "YlGn",
region_id = "ADM1_FR",  # selon le champ de ton shapefile
title = "NDVI 2024"
)
## Fonctions de traitement raster et cartographie
library(raster)
library(tmap)
library(leaflet)
library(sf)
library(exactextractr)
# Fonction de chargement et visualisation de raster
render_indicator_raster <- function(indicator_name, palette = "viridis") {
path <- paste0("data/", indicator_name, "/", indicator_name, "_2024.tif")
rast <- raster(path)
static_map <- tm_shape(rast) +
tm_raster(style = "quantile", palette = palette, title = toupper(indicator_name)) +
tm_layout(main.title = paste0(toupper(indicator_name), " â€“ SÃ©nÃ©gal (2024)"),
legend.outside = TRUE)
pal_fun <- colorNumeric(palette = palette, domain = values(rast), na.color = "transparent")
interactive_map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addRasterImage(rast, colors = pal_fun, opacity = 0.8) %>%
addLegend(pal = pal_fun, values = values(rast), title = indicator_name, position = "bottomright")
list(static = static_map, interactive = interactive_map, raster = rast)
}
# ðŸ”¹ Fonction dâ€™extraction zonale
extract_raster_by_region <- function(raster_obj, shapefile_path, region_id = "region") {
regions <- st_read(shapefile_path, quiet = TRUE)
mean_vals <- exact_extract(raster_obj, regions, 'mean')
regions$mean_value <- round(mean_vals, 3)
regions
}
# ðŸ”¹ Carte interactive enrichie
plot_raster_aggregated_leaflet <- function(raster_obj, shapefile_path, palette = "YlGn", region_id = "region", title = "Indice") {
regions <- extract_raster_by_region(raster_obj, shapefile_path, region_id)
# CrÃ©ation dynamique des labels
region_names <- regions[[region_id]]
mean_values <- regions$mean_value
pal <- colorNumeric(palette = palette, domain = mean_values, na.color = "transparent")
leaflet(regions) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
fillColor = ~pal(mean_value),
weight = 1,
color = "#666",
fillOpacity = 0.7,
label = lapply(seq_along(region_names), function(i) {
paste0(region_names[i], " : ", mean_values[i])
}),
popup = lapply(seq_along(region_names), function(i) {
paste("<b>RÃ©gion :</b>", region_names[i], "<br><b>Valeur moyenne :</b>", mean_values[i])
}),
labelOptions = labelOptions(direction = "auto")
) %>%
addLegend(pal = pal, values = mean_values, title = paste("Valeur moyenne â€“", title), position = "bottomright")
}
plot_raster_aggregated_leaflet(
raster_obj = ndvi_out$raster,
shapefile_path = "data/shapes/regions_senegal.shp",
palette = "YlGn",
region_id = "ADM1_FR",  # selon le champ de ton shapefile
title = "NDVI 2024"
)
regions$ndvi <- exact_extract(ndvi_out$raster, regions, 'mean')
tm_shape(regions) +
tm_polygons("ndvi", palette = "YlGn", style = "quantile", title = "NDVI moyen") +
tm_layout(main.title = "NDVI moyen par rÃ©gion â€“ 2024", legend.outside = TRUE)
plot_raster_aggregated_leaflet(
raster_obj = ndvi_out$raster,
shapefile_path = "data/shapes/regions_senegal.shp",
palette = "YlGn",
region_id = "ADM1_FR",  # selon le champ de ton shapefile
title = "NDVI 2024"
)
# Ce chunk doit Ãªtre exÃ©cutÃ© AVANT exact_extract
ndvi_out <- render_indicator_raster("ndvi", palette = "YlGn")
ndvi_out <- render_indicator_raster("ndvi", palette = "YlGn")
## Fonctions de traitement raster et cartographie
library(raster)
library(tmap)
library(leaflet)
library(sf)
library(exactextractr)
# Fonction de chargement et visualisation de raster
render_indicator_raster <- function(indicator_name, palette = "viridis") {
path <- paste0("data/", indicator_name, "/", indicator_name, "_senegal.tif")
rast <- raster(path)
static_map <- tm_shape(rast) +
tm_raster(style = "quantile", palette = palette, title = toupper(indicator_name)) +
tm_layout(main.title = paste0(toupper(indicator_name), " â€“ SÃ©nÃ©gal (2024)"),
legend.outside = TRUE)
pal_fun <- colorNumeric(palette = palette, domain = values(rast), na.color = "transparent")
interactive_map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addRasterImage(rast, colors = pal_fun, opacity = 0.8) %>%
addLegend(pal = pal_fun, values = values(rast), title = indicator_name, position = "bottomright")
list(static = static_map, interactive = interactive_map, raster = rast)
}
# ðŸ”¹ Fonction dâ€™extraction zonale
extract_raster_by_region <- function(raster_obj, shapefile_path, region_id = "region") {
regions <- st_read(shapefile_path, quiet = TRUE)
mean_vals <- exact_extract(raster_obj, regions, 'mean')
regions$mean_value <- round(mean_vals, 3)
regions
}
# ðŸ”¹ Carte interactive enrichie
plot_raster_aggregated_leaflet <- function(raster_obj, shapefile_path, palette = "YlGn", region_id = "region", title = "Indice") {
regions <- extract_raster_by_region(raster_obj, shapefile_path, region_id)
# CrÃ©ation dynamique des labels
region_names <- regions[[region_id]]
mean_values <- regions$mean_value
pal <- colorNumeric(palette = palette, domain = mean_values, na.color = "transparent")
leaflet(regions) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
fillColor = ~pal(mean_value),
weight = 1,
color = "#666",
fillOpacity = 0.7,
label = lapply(seq_along(region_names), function(i) {
paste0(region_names[i], " : ", mean_values[i])
}),
popup = lapply(seq_along(region_names), function(i) {
paste("<b>RÃ©gion :</b>", region_names[i], "<br><b>Valeur moyenne :</b>", mean_values[i])
}),
labelOptions = labelOptions(direction = "auto")
) %>%
addLegend(pal = pal, values = mean_values, title = paste("Valeur moyenne â€“", title), position = "bottomright")
}
ndvi_out <- render_indicator_raster("ndvi", palette = "YlGn")
ndvi_out <- render_indicator_raster("ndvi", palette = "YlGn")
plot_raster_aggregated_leaflet(
raster_obj = ndvi_out$raster,
shapefile_path = "data/shapes/regions_senegal.shp",
palette = "YlGn",
region_id = "ADM1_FR",  # selon le champ de ton shapefile
title = "NDVI 2024"
)
regions$ndvi <- exact_extract(ndvi_out$raster, regions, 'mean')
tm_shape(regions) +
tm_polygons("ndvi", palette = "YlGn", style = "quantile", title = "NDVI moyen") +
tm_layout(main.title = "NDVI moyen par rÃ©gion â€“ 2024", legend.outside = TRUE)
regions$ndvi <- exact_extract(ndvi_out$raster, regions, 'mean')
tm_shape(regions) +
tm_polygons("ndvi", palette = "YlGn", style = "quantile", title = "NDVI moyen") +
tm_layout(main.title = "NDVI moyen par rÃ©gion â€“ 2024", legend.outside = TRUE)
View(ndvi_out)
## Fonctions de traitement raster et cartographie
library(raster)
library(tmap)
library(leaflet)
library(sf)
library(exactextractr)
# Fonction de chargement et visualisation de raster
render_indicator_raster <- function(indicator_name, palette = "viridis") {
path <- paste0("data/", indicator_name, "/", indicator_name, "_senegal.tif")
rast <- raster(path)
static_map <- tm_shape(rast) +
tm_raster(style = "quantile", palette = palette, title = toupper(indicator_name)) +
tm_layout(main.title = paste0(toupper(indicator_name), " â€“ SÃ©nÃ©gal (2024)"),
legend.outside = TRUE)
pal_fun <- colorNumeric(palette = palette, domain = values(rast), na.color = "transparent")
interactive_map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addRasterImage(rast, colors = pal_fun, opacity = 0.8) %>%
addLegend(pal = pal_fun, values = values(rast), title = indicator_name, position = "bottomright")
list(static = static_map, interactive = interactive_map, raster = rast)
}
# ðŸ”¹ Fonction dâ€™extraction zonale
extract_raster_by_region <- function(raster_obj, shapefile_path, region_id = "ADM1_FR") {
regions <- st_read(shapefile_path, quiet = TRUE)
mean_vals <- exact_extract(raster_obj, regions, 'mean')
regions$mean_value <- round(mean_vals, 3)
regions
}
# ðŸ”¹ Carte interactive enrichie
plot_raster_aggregated_leaflet <- function(raster_obj, shapefile_path, palette = "YlGn", region_id = "ADM1_FR", title = "Indice") {
regions <- extract_raster_by_region(raster_obj, shapefile_path, region_id)
# CrÃ©ation dynamique des labels
region_names <- regions[[region_id]]
mean_values <- regions$mean_value
pal <- colorNumeric(palette = palette, domain = mean_values, na.color = "transparent")
leaflet(regions) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
fillColor = ~pal(mean_value),
weight = 1,
color = "#666",
fillOpacity = 0.7,
label = lapply(seq_along(region_names), function(i) {
paste0(region_names[i], " : ", mean_values[i])
}),
popup = lapply(seq_along(region_names), function(i) {
paste("<b>RÃ©gion :</b>", region_names[i], "<br><b>Valeur moyenne :</b>", mean_values[i])
}),
labelOptions = labelOptions(direction = "auto")
) %>%
addLegend(pal = pal, values = mean_values, title = paste("Valeur moyenne â€“", title), position = "bottomright")
}
regions <- extract_raster_by_region(raster_obj, shapefile_path, region_id)
# Fonction de chargement et visualisation de raster
render_indicator_raster <- function(indicator_name, palette = "viridis") {
path <- paste0("data/", indicator_name, "/", indicator_name, "_senegal.tif")
rast <- raster(path)
static_map <- tm_shape(rast) +
tm_raster(style = "quantile", palette = palette, title = toupper(indicator_name)) +
tm_layout(main.title = paste0(toupper(indicator_name), " â€“ SÃ©nÃ©gal (2024)"),
legend.outside = TRUE)
pal_fun <- colorNumeric(palette = palette, domain = values(rast), na.color = "transparent")
interactive_map <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addRasterImage(rast, colors = pal_fun, opacity = 0.8) %>%
addLegend(pal = pal_fun, values = values(rast), title = indicator_name, position = "bottomright")
list(static = static_map, interactive = interactive_map, raster = rast)
}
# ðŸ”¹ Fonction dâ€™extraction zonale
extract_raster_by_region <- function(raster_obj, shapefile_path, region_id = "ADM1_FR") {
regions <- st_read(shapefile_path, quiet = TRUE)
mean_vals <- exact_extract(raster_obj, regions, 'mean')
regions$mean_value <- round(mean_vals, 3)
regions
}
# ðŸ”¹ Carte interactive enrichie
plot_raster_aggregated_leaflet <- function(raster_obj, shapefile_path, palette = "YlGn", region_id = "ADM1_FR", title = "Indice") {
regions <- extract_raster_by_region(raster_obj, shapefile_path, region_id)
# CrÃ©ation dynamique des labels
region_names <- regions[[region_id]]
mean_values <- regions$mean_value
pal <- colorNumeric(palette = palette, domain = mean_values, na.color = "transparent")
leaflet(regions) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
fillColor = ~pal(mean_value),
weight = 1,
color = "#666",
fillOpacity = 0.7,
label = lapply(seq_along(region_names), function(i) {
paste0(region_names[i], " : ", mean_values[i])
}),
popup = lapply(seq_along(region_names), function(i) {
paste("<b>RÃ©gion :</b>", region_names[i], "<br><b>Valeur moyenne :</b>", mean_values[i])
}),
labelOptions = labelOptions(direction = "auto")
) %>%
addLegend(pal = pal, values = mean_values, title = paste("Valeur moyenne â€“", title), position = "bottomright")
}
ndvi_out <- render_indicator_raster("ndvi", palette = "YlGn")
plot_raster_aggregated_leaflet(
raster_obj = ndvi_out$raster,
shapefile_path = "data/shapes/regions_senegal.shp",
palette = "YlGn",
region_id = "ADM1_FR",  # selon le champ de ton shapefile
title = "NDVI 2024"
)
regions$ndvi <- exact_extract(ndvi_out$raster, regions, 'mean')
tm_shape(regions) +
tm_polygons("ndvi", palette = "YlGn", style = "quantile", title = "NDVI moyen") +
tm_layout(main.title = "NDVI moyen par rÃ©gion â€“ 2024", legend.outside = TRUE)
ari_out <- render_indicator_raster("ari", palette = "Greens")
ari_out$static
lswi_out <- render_indicator_raster("lswi", palette = "Blues")
lswi_out$static
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
